#!/usr/bin/python
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import IUPAC, generic_dna
from Bio.SeqFeature import SeqFeature, FeatureLocation
from Bio import Restriction
from Bio.Restriction import *
from Bio.Seq import Seq
from Bio.Alphabet import generic_dna, generic_protein
from Bio.SeqUtils import MeltingTemp as mt
from subprocess import call
from StringIO import StringIO
import os
import sys
import copy
import time
import csv
import pymysql.cursors

# To run the cript:
# ./generate_cluster_fragments_v5.py backbones.fasta 08_CP004121/ 08_CP004121/CP004121_ORFs.fasta CP004121
# v2working for cluster #5.

TRIM_SIZE = 1800  # maximum allowable length of a gene for ordering from Twist
OVERHANG_LEN = 60
#OPERON_SIZE = 6000
OPERON_SIZE = 11000  # increaseo peron size when you want to specify the order of the genetic parts
db = pymysql.connect(host='localhost',user='root',passwd='HiMommy12')
cursor = db.cursor()
querySetup="SELECT DISTINCT ClusterName FROM GNPNDB.EngineeredGeneClusters"
start=db.cursor()
start.execute(querySetup)
names=start.fetchone()
nameList=""
while names:
        nameList=names
        print nameList[0]
        queryStart = (" SELECT Sequence FROM GNPNDB.NewPlasmidID Where GeneClusterID = (Select GeneClusterID from GNPNDB.EngineeredGeneClusters Where ClusterName= '"+ nameList[0]+ "' and EngineeredGeneClusters.Version='2.2' )")
        weird=db.cursor()
        weird.execute(queryStart)
        sequenceFull=""
        spot=0
        sequencePull=weird.fetchone()
        if sequencePull=="None":
                break
        while sequencePull:
                #        print sequencePull[0]
#                print sequencePull
                sequenceFull=sequenceFull+str(sequencePull[0])
                sequencePull=weird.fetchone()
#print type(sequencePull)

        query = (" SELECT * FROM GNPNDB.Cassette Where GeneClusterID = (Select GeneClusterID from GNPNDB.EngineeredGeneClusters Where ClusterName='"+nameList[0]+"' and Version='2.2' )")
        cursor.execute(query)
        fullSeq=Seq(sequenceFull,generic_dna)
#print sequenceFull
        record = SeqRecord(fullSeq,id='123456789',  # random accession number
                                      name=nameList[0],description='An example GenBank file generated by GPNPN')

        recordFinal = SeqRecord(fullSeq,id='123456789',  # random accession number
                                                         name=nameList[0],description='An example GenBank file generated by GPNPN')


        fullSeqs=""
        row = cursor.fetchone()
        b=0
        gbfile_name= nameList[0]+".gb"
        d=0
        output_file = open(os.path.join("", gbfile_name), "w")
        print row
        print gbfile_name
        if row!=None:
                print str(row[4])
                print "choclate"
                queriesName=("Select CommonName From GNPNDB.NewPlasmidID Where PlasmidID='"+str(row[4])+"'")
                nameCursors=db.cursor()
                nameCursors.execute(queriesName)
                nameRow=nameCursors.fetchone()
                print nameRow[2:len(str(nameRow))-3]
                nameRow=str(nameRow)[2:len(str(nameRow))-3]
                if nameRow!=None:
                       print nameRow
        x=1
        if   row!=None:
                plasmidId=row[4]
        else:
                plasmidId=0
        while row!=None and row[4]==plasmidId :


                        
                cursors = db.cursor()
                
                queriesTerm = (" SELECT CommonName,Sequence FROM GNPNDB.Terminator where TerminatorID ="+str(row[3]))
                queriesProm = (" SELECT CommonName,Sequence FROM GNPNDB.Promoter where PromoterID ="+str(row[1]))
                queriesGene = (" SELECT CDS,ONS FROM GNPNDB.Gene where GeneID ="+str(row[2]))
                queriesBackbone=("SELECT  name,Sequence from GNPNDB.backbone where backboneID in (SELECT BackboneID from GNPNDB.NewPlasmidID Where PlasmidID =(SELECT DISTINCT(PlasmidID) From GNPNDB.Cassette WHERE PlasmidID="+str(row[4])+"))")
       
                        
                queriesResist=("SELECT  Name,Sequence from GNPNDB.Resist where ResistID in (SELECT ResistanceID from GNPNDB.NewPlasmidID Where PlasmidID =(SELECT DISTINCT(PlasmidID) From GNPNDB.Cassette WHERE PlasmidID="+str(row[4])+"))")
                cursors.execute(queriesProm)
                cursorsFour= db.cursor()
                cursorsFour.execute(queriesBackbone)
                cursorsFive= db.cursor()
                cursorsFive.execute(queriesResist)
                rowsFive= cursorsFive.fetchone()                                        
                                                 
                rows = cursors.fetchone()                
                while rows:
                        rowsLen=len(str(rows[1])) 
                        feature = SeqFeature(FeatureLocation(start=spot, end= spot+rowsLen), type='Promoter', qualifiers={'locus_tag': rows[0]})

                        record.features.append(feature)
                        spot=spot+rowsLen
                        fullSeqs=fullSeqs+str(rows[1])       
                        rows = cursors.fetchone()

                        cursorsTwo=db.cursor()        
                        cursorsTwo.execute(queriesGene)
               
                rowsTwo = cursorsTwo.fetchone()
                while rowsTwo:
                        rowsLen=len(str(rowsTwo[1]))      
                        featurer = SeqFeature(FeatureLocation(start=spot, end= spot+rowsLen), type='CDS', qualifiers={'locus_tag': rowsTwo[0]})
                        spot=spot+rowsLen
                        fullSeqs=fullSeqs+str(rowsTwo[1])
                        record.features.append(featurer)
                        rowsTwo = cursorsTwo.fetchone()
                cursorsThree=db.cursor()
                cursorsThree.execute(queriesTerm)
                rowsThree=cursorsThree.fetchone()
                while rowsThree:
                        rowsLen=len(str(rowsThree[1]))
                        feature = SeqFeature(FeatureLocation(start=spot, end= spot+rowsLen), type='Terminator', qualifiers={'locus_tag': rowsThree[0]})
                        record.features.append(feature)
                        spot=spot+rowsLen
                        fullSeqs=fullSeqs+str(rowsThree[1])
                        rowsThree=cursorsThree.fetchone()        
                        x=x+1
  #              print x

                if(x==3):
                               
                        rowsLen=len(str(rowsFive[1]))
                        feature = SeqFeature(FeatureLocation(start=spot, end= spot+rowsLen), type='Resistor', qualifiers={'locus_tag': rowsFive[0]})
                        record.features.append(feature)
                        spot=spot+rowsLen
                        fullSeqs=fullSeqs+str(rowsFive[1])
                        rowsFive= cursorsFive.fetchone()
                
               


                oldNumber=row[4]
                oldName=nameRow
                row=cursor.fetchone()
                print nameRow
                #if row!=None and d>=1:
                 #       queriesName=("Select CommonName From GNPNDB.NewPlasmidID Where PlasmidID='"+str(row[4])+"'")
                  #      
                   #     nameCursors=db.cursor()
                    #    nameCursors.execute(queriesName)
                     #   nameRow=nameCursors.fetchone()
                      #  if len(str(nameRow))>10:
                       #         
                        #        nameRow=str(nameRow)[2:len(str(nameRow))-3]
                        #print nameRow
   #             print row
                #else:
                 #       print "detroit"
                        #d=1
                                
                rowsFour= cursorsFour.fetchone()

                if(row!=None):
                        if(oldNumber!=row[4]):
                                rowsLen=len(str(rowsFour[1]))
                                feature = SeqFeature(FeatureLocation(start=spot, end= spot+rowsLen), type='Backbone', qualifiers={'locus_tag': rowsFour[0]})
                                record.features.append(feature)
                                spot=spot+rowsLen                        
                                x=1
                                fullSeqs=fullSeqs+str(rowsFour[1])                                
                                rowsFour= cursorsFour.fetchone()
                       
                        

                else:
                        if(rowsFour!=None):
                                rowsLen=len(str(rowsFour[1]))
                                tag=rowsFour[0]
                                seqStr=rowsFour[1]
                        else:
                                rowsLen=0
                                tag="null"
                                seqStr=""

                        feature = SeqFeature(FeatureLocation(start=spot, end= spot+rowsLen), type='Backbone', qualifiers={'locus_tag': tag})
                        record.features.append(feature)
                        spot=spot+rowsLen
                        fullSeqs=fullSeqs+str(seqStr)
                                                
                        rowsFour= cursorsFour.fetchone()
                if row!=None:
                        if(plasmidId!=row[4]):        
                                d=1
                                trueFullSeq=Seq(fullSeqs,generic_dna)
                                fullSeqs=""
                                recordTwo= SeqRecord(trueFullSeq,id='123456789',  # random accession number
                                        name=str(oldName),description='An example GenBank file generated by GPNPN ')
                                recordTwo.features=record.features

                                record = SeqRecord(fullSeq,id='123456789',  # random accession number
                                                              name=str(nameRow),description='An example GenBank file generated by GPNPN')
        
        


                                SeqIO.write(recordTwo, output_file, 'genbank')
                                spot=0
                                plasmidId=row[4]
                else:
                        trueFullSeq=Seq(fullSeqs,generic_dna)
                        recordTwo= SeqRecord(trueFullSeq,id='123456789',  # r
                                             name=str(oldName),description='An example GenBank file generated by GPNPN ')
                        recordTwo.features=record.features
                        SeqIO.write(recordTwo, output_file, 'genbank')
                if row!=None:
                        queriesName=("Select CommonName From GNPNDB.NewPlasmidID Where PlasmidID='"+str(row[4])+"'")
                        nameCursorss=db.cursor()
                        nameCursorss.execute(queriesName)
                        nameRow=nameCursorss.fetchone()
                        if len(str(nameRow))>10:
                                nameRow=str(nameRow)[2:len(str(nameRow))-3]
                                                                                                                                                                                                        
                #nameRow= nameCursors.fetchone()
        names=start.fetchone()
db.close()
trueFullSeq=Seq(fullSeqs,generic_dna)

recordTwo= SeqRecord(trueFullSeq,id='123456789',  # random accession number
name="KU33",description='An example GenBank file generated by GPNPN LADY')
print "\n"
# Use this function to chop up sequences and add name to each chopped fragment

seq=Seq("AGGGTTTAATTTAACCCAAATTTAAGGG",generic_dna)
sequence_object = Seq(str(seq), IUPAC.unambiguous_dna)
recordThree=record  
gbfile_name="test.gb"
output_file = open(os.path.join("", gbfile_name), "w")

#SeqIO.write(record, output_file, 'genbank')



#Here=SeqIO.write_records(record)
        
#for element in plasmid:
 #       element_start = seq.find(str(elements_to_seq[element]))
  #      element_end = element_start + len(elements_to_seq[element])
   #     feature = SeqFeature(FeatureLocation(start=element_start, end=element_end), type='Promoter', qualifiers={'locus_tag': element})
    #    print element, element_start + 1, element_end
     #   record.features.append(feature)

        
